diff --git a/package.json b/package.json
index d6e146bd434fd5c9cce41513c1c056a78b1ee617..f87f2a65fc04dc33a56c119228926617bd4c3a05 100644
--- a/package.json
+++ b/package.json
@@ -2,7 +2,7 @@
   "name": "@craftzdog/pouchdb-adapter-websql-core",
   "version": "7.2.3",
   "description": "Underlying adapter code for WebSQL and SQLite-based PouchDB adapters.",
-  "main": "./src/index.js",
+  "main": "./src-cjs/index.js",
   "keywords": [],
   "author": "Dale Harvey <dale@arandomurl.com>",
   "license": "Apache-2.0",
@@ -16,7 +16,7 @@
     "pouchdb-merge": "^7.2.2",
     "pouchdb-utils": "^7.2.2"
   },
-  "module": "./lib/index.es.js",
+  "module": "./src/index.js",
   "files": [
     "src",
     "dist",
diff --git a/src-cjs/bulkDocs.js b/src-cjs/bulkDocs.js
new file mode 100644
index 0000000000000000000000000000000000000000..a51025666d2ffab325009837abd2b6d5f758e6e3
--- /dev/null
+++ b/src-cjs/bulkDocs.js
@@ -0,0 +1,280 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+var pouchdb_adapter_utils_1 = require("pouchdb-adapter-utils");
+var pouchdb_merge_1 = require("pouchdb-merge");
+var pouchdb_json_1 = require("pouchdb-json");
+var pouchdb_errors_1 = require("pouchdb-errors");
+var constants_1 = require("./constants");
+var utils_1 = require("./utils");
+function websqlBulkDocs(dbOpts, req, opts, api, db, websqlChanges, callback) {
+    var newEdits = opts.new_edits;
+    var userDocs = req.docs;
+    // Parse the docs, give them a sequence number for the result
+    var docInfos = userDocs.map(function (doc) {
+        if (doc._id && (0, pouchdb_adapter_utils_1.isLocalId)(doc._id)) {
+            return doc;
+        }
+        var newDoc = (0, pouchdb_adapter_utils_1.parseDoc)(doc, newEdits, dbOpts);
+        return newDoc;
+    });
+    var docInfoErrors = docInfos.filter(function (docInfo) {
+        return docInfo.error;
+    });
+    if (docInfoErrors.length) {
+        return callback(docInfoErrors[0]);
+    }
+    var tx;
+    var results = new Array(docInfos.length);
+    var fetchedDocs = new Map();
+    var preconditionErrored;
+    function complete() {
+        if (preconditionErrored) {
+            return callback(preconditionErrored);
+        }
+        websqlChanges.notify(api._name);
+        callback(null, results);
+    }
+    function verifyAttachment(digest, callback) {
+        var sql = 'SELECT count(*) as cnt FROM ' + constants_1.ATTACH_STORE +
+            ' WHERE digest=?';
+        tx.executeSql(sql, [digest], function (tx, result) {
+            if (result.rows.item(0).cnt === 0) {
+                var err = (0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_STUB, 'unknown stub attachment with digest ' +
+                    digest);
+                callback(err);
+            }
+            else {
+                callback();
+            }
+        });
+    }
+    function verifyAttachments(finish) {
+        var digests = [];
+        docInfos.forEach(function (docInfo) {
+            if (docInfo.data && docInfo.data._attachments) {
+                Object.keys(docInfo.data._attachments).forEach(function (filename) {
+                    var att = docInfo.data._attachments[filename];
+                    if (att.stub) {
+                        digests.push(att.digest);
+                    }
+                });
+            }
+        });
+        if (!digests.length) {
+            return finish();
+        }
+        var numDone = 0;
+        var err;
+        function checkDone() {
+            if (++numDone === digests.length) {
+                finish(err);
+            }
+        }
+        digests.forEach(function (digest) {
+            verifyAttachment(digest, function (attErr) {
+                if (attErr && !err) {
+                    err = attErr;
+                }
+                checkDone();
+            });
+        });
+    }
+    function writeDoc(docInfo, winningRev, winningRevIsDeleted, newRevIsDeleted, isUpdate, delta, resultsIdx, callback) {
+        function finish() {
+            var data = docInfo.data;
+            var deletedInt = newRevIsDeleted ? 1 : 0;
+            var id = data._id;
+            var rev = data._rev;
+            var json = (0, utils_1.stringifyDoc)(data);
+            var sql = 'INSERT INTO ' + constants_1.BY_SEQ_STORE +
+                ' (doc_id, rev, json, deleted) VALUES (?, ?, ?, ?);';
+            var sqlArgs = [id, rev, json, deletedInt];
+            // map seqs to attachment digests, which
+            // we will need later during compaction
+            function insertAttachmentMappings(seq, callback) {
+                var attsAdded = 0;
+                var attsToAdd = Object.keys(data._attachments || {});
+                if (!attsToAdd.length) {
+                    return callback();
+                }
+                function checkDone() {
+                    if (++attsAdded === attsToAdd.length) {
+                        callback();
+                    }
+                    return false; // ack handling a constraint error
+                }
+                function add(att) {
+                    var sql = 'INSERT INTO ' + constants_1.ATTACH_AND_SEQ_STORE +
+                        ' (digest, seq) VALUES (?,?)';
+                    var sqlArgs = [data._attachments[att].digest, seq];
+                    tx.executeSql(sql, sqlArgs, checkDone, checkDone);
+                    // second callback is for a constaint error, which we ignore
+                    // because this docid/rev has already been associated with
+                    // the digest (e.g. when new_edits == false)
+                }
+                for (var i = 0; i < attsToAdd.length; i++) {
+                    add(attsToAdd[i]); // do in parallel
+                }
+            }
+            tx.executeSql(sql, sqlArgs, function (tx, result) {
+                var seq = result.insertId;
+                insertAttachmentMappings(seq, function () {
+                    dataWritten(tx, seq);
+                });
+            }, function () {
+                // constraint error, recover by updating instead (see #1638)
+                var fetchSql = (0, utils_1.select)('seq', constants_1.BY_SEQ_STORE, null, 'doc_id=? AND rev=?');
+                tx.executeSql(fetchSql, [id, rev], function (tx, res) {
+                    var seq = res.rows.item(0).seq;
+                    var sql = 'UPDATE ' + constants_1.BY_SEQ_STORE +
+                        ' SET json=?, deleted=? WHERE doc_id=? AND rev=?;';
+                    var sqlArgs = [json, deletedInt, id, rev];
+                    tx.executeSql(sql, sqlArgs, function (tx) {
+                        insertAttachmentMappings(seq, function () {
+                            dataWritten(tx, seq);
+                        });
+                    });
+                });
+                return false; // ack that we've handled the error
+            });
+        }
+        function collectResults(attachmentErr) {
+            if (!err) {
+                if (attachmentErr) {
+                    err = attachmentErr;
+                    callback(err);
+                }
+                else if (recv === attachments.length) {
+                    finish();
+                }
+            }
+        }
+        var err = null;
+        var recv = 0;
+        docInfo.data._id = docInfo.metadata.id;
+        docInfo.data._rev = docInfo.metadata.rev;
+        var attachments = Object.keys(docInfo.data._attachments || {});
+        if (newRevIsDeleted) {
+            docInfo.data._deleted = true;
+        }
+        function attachmentSaved(err) {
+            recv++;
+            collectResults(err);
+        }
+        attachments.forEach(function (key) {
+            var att = docInfo.data._attachments[key];
+            if (!att.stub) {
+                var data = att.data;
+                delete att.data;
+                att.revpos = parseInt(winningRev, 10);
+                var digest = att.digest;
+                saveAttachment(digest, data, attachmentSaved);
+            }
+            else {
+                recv++;
+                collectResults();
+            }
+        });
+        if (!attachments.length) {
+            finish();
+        }
+        function dataWritten(tx, seq) {
+            var id = docInfo.metadata.id;
+            var revsToCompact = docInfo.stemmedRevs || [];
+            if (isUpdate && api.auto_compaction) {
+                revsToCompact = (0, pouchdb_merge_1.compactTree)(docInfo.metadata).concat(revsToCompact);
+            }
+            if (revsToCompact.length) {
+                (0, utils_1.compactRevs)(revsToCompact, id, tx);
+            }
+            docInfo.metadata.seq = seq;
+            var rev = docInfo.metadata.rev;
+            delete docInfo.metadata.rev;
+            var sql = isUpdate ?
+                'UPDATE ' + constants_1.DOC_STORE +
+                    ' SET json=?, max_seq=?, winningseq=' +
+                    '(SELECT seq FROM ' + constants_1.BY_SEQ_STORE +
+                    ' WHERE doc_id=' + constants_1.DOC_STORE + '.id AND rev=?) WHERE id=?'
+                : 'INSERT INTO ' + constants_1.DOC_STORE +
+                    ' (id, winningseq, max_seq, json) VALUES (?,?,?,?);';
+            var metadataStr = (0, pouchdb_json_1.safeJsonStringify)(docInfo.metadata);
+            var params = isUpdate ?
+                [metadataStr, seq, winningRev, id] :
+                [id, seq, seq, metadataStr];
+            tx.executeSql(sql, params, function () {
+                results[resultsIdx] = {
+                    ok: true,
+                    id: docInfo.metadata.id,
+                    rev: rev
+                };
+                fetchedDocs.set(id, docInfo.metadata);
+                callback();
+            });
+        }
+    }
+    function websqlProcessDocs() {
+        (0, pouchdb_adapter_utils_1.processDocs)(dbOpts.revs_limit, docInfos, api, fetchedDocs, tx, results, writeDoc, opts);
+    }
+    function fetchExistingDocs(callback) {
+        if (!docInfos.length) {
+            return callback();
+        }
+        var numFetched = 0;
+        function checkDone() {
+            if (++numFetched === docInfos.length) {
+                callback();
+            }
+        }
+        docInfos.forEach(function (docInfo) {
+            if (docInfo._id && (0, pouchdb_adapter_utils_1.isLocalId)(docInfo._id)) {
+                return checkDone(); // skip local docs
+            }
+            var id = docInfo.metadata.id;
+            tx.executeSql('SELECT json FROM ' + constants_1.DOC_STORE +
+                ' WHERE id = ?', [id], function (tx, result) {
+                if (result.rows.length) {
+                    var metadata = (0, pouchdb_json_1.safeJsonParse)(result.rows.item(0).json);
+                    fetchedDocs.set(id, metadata);
+                }
+                checkDone();
+            });
+        });
+    }
+    function saveAttachment(digest, data, callback) {
+        var sql = 'SELECT digest FROM ' + constants_1.ATTACH_STORE + ' WHERE digest=?';
+        tx.executeSql(sql, [digest], function (tx, result) {
+            if (result.rows.length) { // attachment already exists
+                return callback();
+            }
+            // we could just insert before selecting and catch the error,
+            // but my hunch is that it's cheaper not to serialize the blob
+            // from JS to C if we don't have to (TODO: confirm this)
+            sql = 'INSERT INTO ' + constants_1.ATTACH_STORE +
+                ' (digest, body, escaped) VALUES (?,?,1)';
+            tx.executeSql(sql, [digest, (0, utils_1.escapeBlob)(data)], function () {
+                callback();
+            }, function () {
+                // ignore constaint errors, means it already exists
+                callback();
+                return false; // ack we handled the error
+            });
+        });
+    }
+    (0, pouchdb_adapter_utils_1.preprocessAttachments)(docInfos, 'binary', function (err) {
+        if (err) {
+            return callback(err);
+        }
+        db.transaction(function (txn) {
+            tx = txn;
+            verifyAttachments(function (err) {
+                if (err) {
+                    preconditionErrored = err;
+                }
+                else {
+                    fetchExistingDocs(websqlProcessDocs);
+                }
+            });
+        }, (0, utils_1.websqlError)(callback), complete);
+    });
+}
+exports.default = websqlBulkDocs;
diff --git a/src-cjs/constants.js b/src-cjs/constants.js
new file mode 100644
index 0000000000000000000000000000000000000000..fed8bda4299620838120bd8eeb549c680262c980
--- /dev/null
+++ b/src-cjs/constants.js
@@ -0,0 +1,27 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.ATTACH_AND_SEQ_STORE = exports.META_STORE = exports.LOCAL_STORE = exports.ATTACH_STORE = exports.BY_SEQ_STORE = exports.DOC_STORE = exports.ADAPTER_VERSION = void 0;
+function quote(str) {
+    return "'" + str + "'";
+}
+var ADAPTER_VERSION = 7; // used to manage migrations
+exports.ADAPTER_VERSION = ADAPTER_VERSION;
+// The object stores created for each database
+// DOC_STORE stores the document meta data, its revision history and state
+var DOC_STORE = quote('document-store');
+exports.DOC_STORE = DOC_STORE;
+// BY_SEQ_STORE stores a particular version of a document, keyed by its
+// sequence id
+var BY_SEQ_STORE = quote('by-sequence');
+exports.BY_SEQ_STORE = BY_SEQ_STORE;
+// Where we store attachments
+var ATTACH_STORE = quote('attach-store');
+exports.ATTACH_STORE = ATTACH_STORE;
+var LOCAL_STORE = quote('local-store');
+exports.LOCAL_STORE = LOCAL_STORE;
+var META_STORE = quote('metadata-store');
+exports.META_STORE = META_STORE;
+// where we store many-to-many relations between attachment
+// digests and seqs
+var ATTACH_AND_SEQ_STORE = quote('attach-seq-store');
+exports.ATTACH_AND_SEQ_STORE = ATTACH_AND_SEQ_STORE;
diff --git a/src-cjs/index.js b/src-cjs/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..b7a07f4db9b4637b4e867838aa2ee311bdb92c8b
--- /dev/null
+++ b/src-cjs/index.js
@@ -0,0 +1,975 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+var pouchdb_utils_1 = require("pouchdb-utils");
+var pouchdb_adapter_utils_1 = require("pouchdb-adapter-utils");
+var pouchdb_merge_1 = require("pouchdb-merge");
+var pouchdb_json_1 = require("pouchdb-json");
+var pouchdb_binary_utils_1 = require("pouchdb-binary-utils");
+var parseHex_1 = require("./parseHex");
+var bulkDocs_1 = require("./bulkDocs");
+var pouchdb_errors_1 = require("pouchdb-errors");
+var constants_1 = require("./constants");
+var utils_1 = require("./utils");
+var openDatabase_1 = require("./openDatabase");
+var websqlChanges = new pouchdb_utils_1.changesHandler();
+function fetchAttachmentsIfNecessary(doc, opts, api, txn, cb) {
+    var attachments = Object.keys(doc._attachments || {});
+    if (!attachments.length) {
+        return cb && cb();
+    }
+    var numDone = 0;
+    function checkDone() {
+        if (++numDone === attachments.length && cb) {
+            cb();
+        }
+    }
+    function fetchAttachment(doc, att) {
+        var attObj = doc._attachments[att];
+        var attOpts = { binary: opts.binary, ctx: txn };
+        api._getAttachment(doc._id, att, attObj, attOpts, function (_, data) {
+            doc._attachments[att] = Object.assign((0, pouchdb_utils_1.pick)(attObj, ['digest', 'content_type']), { data: data });
+            checkDone();
+        });
+    }
+    attachments.forEach(function (att) {
+        if (opts.attachments && opts.include_docs) {
+            fetchAttachment(doc, att);
+        }
+        else {
+            doc._attachments[att].stub = true;
+            checkDone();
+        }
+    });
+}
+var POUCH_VERSION = 1;
+// these indexes cover the ground for most allDocs queries
+var BY_SEQ_STORE_DELETED_INDEX_SQL = 'CREATE INDEX IF NOT EXISTS \'by-seq-deleted-idx\' ON ' +
+    constants_1.BY_SEQ_STORE + ' (seq, deleted)';
+var BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL = 'CREATE UNIQUE INDEX IF NOT EXISTS \'by-seq-doc-id-rev\' ON ' +
+    constants_1.BY_SEQ_STORE + ' (doc_id, rev)';
+var DOC_STORE_WINNINGSEQ_INDEX_SQL = 'CREATE INDEX IF NOT EXISTS \'doc-winningseq-idx\' ON ' +
+    constants_1.DOC_STORE + ' (winningseq)';
+var ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL = 'CREATE INDEX IF NOT EXISTS \'attach-seq-seq-idx\' ON ' +
+    constants_1.ATTACH_AND_SEQ_STORE + ' (seq)';
+var ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL = 'CREATE UNIQUE INDEX IF NOT EXISTS \'attach-seq-digest-idx\' ON ' +
+    constants_1.ATTACH_AND_SEQ_STORE + ' (digest, seq)';
+var DOC_STORE_AND_BY_SEQ_JOINER = constants_1.BY_SEQ_STORE +
+    '.seq = ' + constants_1.DOC_STORE + '.winningseq';
+var SELECT_DOCS = constants_1.BY_SEQ_STORE + '.seq AS seq, ' +
+    constants_1.BY_SEQ_STORE + '.deleted AS deleted, ' +
+    constants_1.BY_SEQ_STORE + '.json AS data, ' +
+    constants_1.BY_SEQ_STORE + '.rev AS rev, ' +
+    constants_1.DOC_STORE + '.json AS metadata';
+function WebSqlPouch(opts, callback) {
+    var api = this;
+    var instanceId = null;
+    var size = (0, utils_1.getSize)(opts);
+    var idRequests = [];
+    var encoding;
+    api._name = opts.name;
+    // extend the options here, because sqlite plugin has a ton of options
+    // and they are constantly changing, so it's more prudent to allow anything
+    var websqlOpts = Object.assign({}, opts, {
+        version: POUCH_VERSION,
+        description: opts.name,
+        size: size
+    });
+    var openDBResult = (0, openDatabase_1.default)(websqlOpts);
+    if (openDBResult.error) {
+        return (0, utils_1.websqlError)(callback)(openDBResult.error);
+    }
+    var db = openDBResult.db;
+    if (typeof db.readTransaction !== 'function') {
+        // doesn't exist in sqlite plugin
+        db.readTransaction = db.transaction;
+    }
+    function dbCreated() {
+        // note the db name in case the browser upgrades to idb
+        if ((0, pouchdb_utils_1.hasLocalStorage)()) {
+            window.localStorage['_pouch__websqldb_' + api._name] = true;
+        }
+        callback(null, api);
+    }
+    // In this migration, we added the 'deleted' and 'local' columns to the
+    // by-seq and doc store tables.
+    // To preserve existing user data, we re-process all the existing JSON
+    // and add these values.
+    // Called migration2 because it corresponds to adapter version (db_version) #2
+    function runMigration2(tx, callback) {
+        // index used for the join in the allDocs query
+        tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);
+        tx.executeSql('ALTER TABLE ' + constants_1.BY_SEQ_STORE +
+            ' ADD COLUMN deleted TINYINT(1) DEFAULT 0', [], function () {
+            tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);
+            tx.executeSql('ALTER TABLE ' + constants_1.DOC_STORE +
+                ' ADD COLUMN local TINYINT(1) DEFAULT 0', [], function () {
+                tx.executeSql('CREATE INDEX IF NOT EXISTS \'doc-store-local-idx\' ON ' +
+                    constants_1.DOC_STORE + ' (local, id)');
+                var sql = 'SELECT ' + constants_1.DOC_STORE + '.winningseq AS seq, ' + constants_1.DOC_STORE +
+                    '.json AS metadata FROM ' + constants_1.BY_SEQ_STORE + ' JOIN ' + constants_1.DOC_STORE +
+                    ' ON ' + constants_1.BY_SEQ_STORE + '.seq = ' + constants_1.DOC_STORE + '.winningseq';
+                tx.executeSql(sql, [], function (tx, result) {
+                    var deleted = [];
+                    var local = [];
+                    for (var i = 0; i < result.rows.length; i++) {
+                        var item = result.rows.item(i);
+                        var seq = item.seq;
+                        var metadata = JSON.parse(item.metadata);
+                        if ((0, pouchdb_adapter_utils_1.isDeleted)(metadata)) {
+                            deleted.push(seq);
+                        }
+                        if ((0, pouchdb_adapter_utils_1.isLocalId)(metadata.id)) {
+                            local.push(metadata.id);
+                        }
+                    }
+                    tx.executeSql('UPDATE ' + constants_1.DOC_STORE + 'SET local = 1 WHERE id IN ' +
+                        (0, utils_1.qMarks)(local.length), local, function () {
+                        tx.executeSql('UPDATE ' + constants_1.BY_SEQ_STORE +
+                            ' SET deleted = 1 WHERE seq IN ' +
+                            (0, utils_1.qMarks)(deleted.length), deleted, callback);
+                    });
+                });
+            });
+        });
+    }
+    // in this migration, we make all the local docs unversioned
+    function runMigration3(tx, callback) {
+        var local = 'CREATE TABLE IF NOT EXISTS ' + constants_1.LOCAL_STORE +
+            ' (id UNIQUE, rev, json)';
+        tx.executeSql(local, [], function () {
+            var sql = 'SELECT ' + constants_1.DOC_STORE + '.id AS id, ' +
+                constants_1.BY_SEQ_STORE + '.json AS data ' +
+                'FROM ' + constants_1.BY_SEQ_STORE + ' JOIN ' +
+                constants_1.DOC_STORE + ' ON ' + constants_1.BY_SEQ_STORE + '.seq = ' +
+                constants_1.DOC_STORE + '.winningseq WHERE local = 1';
+            tx.executeSql(sql, [], function (tx, res) {
+                var rows = [];
+                for (var i = 0; i < res.rows.length; i++) {
+                    rows.push(res.rows.item(i));
+                }
+                function doNext() {
+                    if (!rows.length) {
+                        return callback(tx);
+                    }
+                    var row = rows.shift();
+                    var rev = JSON.parse(row.data)._rev;
+                    tx.executeSql('INSERT INTO ' + constants_1.LOCAL_STORE +
+                        ' (id, rev, json) VALUES (?,?,?)', [row.id, rev, row.data], function (tx) {
+                        tx.executeSql('DELETE FROM ' + constants_1.DOC_STORE + ' WHERE id=?', [row.id], function (tx) {
+                            tx.executeSql('DELETE FROM ' + constants_1.BY_SEQ_STORE + ' WHERE seq=?', [row.seq], function () {
+                                doNext();
+                            });
+                        });
+                    });
+                }
+                doNext();
+            });
+        });
+    }
+    // in this migration, we remove doc_id_rev and just use rev
+    function runMigration4(tx, callback) {
+        function updateRows(rows) {
+            function doNext() {
+                if (!rows.length) {
+                    return callback(tx);
+                }
+                var row = rows.shift();
+                var doc_id_rev = (0, parseHex_1.default)(row.hex, encoding);
+                var idx = doc_id_rev.lastIndexOf('::');
+                var doc_id = doc_id_rev.substring(0, idx);
+                var rev = doc_id_rev.substring(idx + 2);
+                var sql = 'UPDATE ' + constants_1.BY_SEQ_STORE +
+                    ' SET doc_id=?, rev=? WHERE doc_id_rev=?';
+                tx.executeSql(sql, [doc_id, rev, doc_id_rev], function () {
+                    doNext();
+                });
+            }
+            doNext();
+        }
+        var sql = 'ALTER TABLE ' + constants_1.BY_SEQ_STORE + ' ADD COLUMN doc_id';
+        tx.executeSql(sql, [], function (tx) {
+            var sql = 'ALTER TABLE ' + constants_1.BY_SEQ_STORE + ' ADD COLUMN rev';
+            tx.executeSql(sql, [], function (tx) {
+                tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL, [], function (tx) {
+                    var sql = 'SELECT hex(doc_id_rev) as hex FROM ' + constants_1.BY_SEQ_STORE;
+                    tx.executeSql(sql, [], function (tx, res) {
+                        var rows = [];
+                        for (var i = 0; i < res.rows.length; i++) {
+                            rows.push(res.rows.item(i));
+                        }
+                        updateRows(rows);
+                    });
+                });
+            });
+        });
+    }
+    // in this migration, we add the attach_and_seq table
+    // for issue #2818
+    function runMigration5(tx, callback) {
+        function migrateAttsAndSeqs(tx) {
+            // need to actually populate the table. this is the expensive part,
+            // so as an optimization, check first that this database even
+            // contains attachments
+            var sql = 'SELECT COUNT(*) AS cnt FROM ' + constants_1.ATTACH_STORE;
+            tx.executeSql(sql, [], function (tx, res) {
+                var count = res.rows.item(0).cnt;
+                if (!count) {
+                    return callback(tx);
+                }
+                var offset = 0;
+                var pageSize = 10;
+                function nextPage() {
+                    var sql = (0, utils_1.select)(SELECT_DOCS + ', ' + constants_1.DOC_STORE + '.id AS id', [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], DOC_STORE_AND_BY_SEQ_JOINER, null, constants_1.DOC_STORE + '.id ');
+                    sql += ' LIMIT ' + pageSize + ' OFFSET ' + offset;
+                    offset += pageSize;
+                    tx.executeSql(sql, [], function (tx, res) {
+                        if (!res.rows.length) {
+                            return callback(tx);
+                        }
+                        var digestSeqs = {};
+                        function addDigestSeq(digest, seq) {
+                            // uniq digest/seq pairs, just in case there are dups
+                            var seqs = digestSeqs[digest] = (digestSeqs[digest] || []);
+                            if (seqs.indexOf(seq) === -1) {
+                                seqs.push(seq);
+                            }
+                        }
+                        for (var i = 0; i < res.rows.length; i++) {
+                            var row = res.rows.item(i);
+                            var doc = (0, utils_1.unstringifyDoc)(row.data, row.id, row.rev);
+                            var atts = Object.keys(doc._attachments || {});
+                            for (var j = 0; j < atts.length; j++) {
+                                var att = doc._attachments[atts[j]];
+                                addDigestSeq(att.digest, row.seq);
+                            }
+                        }
+                        var digestSeqPairs = [];
+                        Object.keys(digestSeqs).forEach(function (digest) {
+                            var seqs = digestSeqs[digest];
+                            seqs.forEach(function (seq) {
+                                digestSeqPairs.push([digest, seq]);
+                            });
+                        });
+                        if (!digestSeqPairs.length) {
+                            return nextPage();
+                        }
+                        var numDone = 0;
+                        digestSeqPairs.forEach(function (pair) {
+                            var sql = 'INSERT INTO ' + constants_1.ATTACH_AND_SEQ_STORE +
+                                ' (digest, seq) VALUES (?,?)';
+                            tx.executeSql(sql, pair, function () {
+                                if (++numDone === digestSeqPairs.length) {
+                                    nextPage();
+                                }
+                            });
+                        });
+                    });
+                }
+                nextPage();
+            });
+        }
+        var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +
+            constants_1.ATTACH_AND_SEQ_STORE + ' (digest, seq INTEGER)';
+        tx.executeSql(attachAndRev, [], function (tx) {
+            tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL, [], function (tx) {
+                tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL, [], migrateAttsAndSeqs);
+            });
+        });
+    }
+    // in this migration, we use escapeBlob() and unescapeBlob()
+    // instead of reading out the binary as HEX, which is slow
+    function runMigration6(tx, callback) {
+        var sql = 'ALTER TABLE ' + constants_1.ATTACH_STORE +
+            ' ADD COLUMN escaped TINYINT(1) DEFAULT 0';
+        tx.executeSql(sql, [], callback);
+    }
+    // issue #3136, in this migration we need a "latest seq" as well
+    // as the "winning seq" in the doc store
+    function runMigration7(tx, callback) {
+        var sql = 'ALTER TABLE ' + constants_1.DOC_STORE +
+            ' ADD COLUMN max_seq INTEGER';
+        tx.executeSql(sql, [], function (tx) {
+            var sql = 'UPDATE ' + constants_1.DOC_STORE + ' SET max_seq=(SELECT MAX(seq) FROM ' +
+                constants_1.BY_SEQ_STORE + ' WHERE doc_id=id)';
+            tx.executeSql(sql, [], function (tx) {
+                // add unique index after filling, else we'll get a constraint
+                // error when we do the ALTER TABLE
+                var sql = 'CREATE UNIQUE INDEX IF NOT EXISTS \'doc-max-seq-idx\' ON ' +
+                    constants_1.DOC_STORE + ' (max_seq)';
+                tx.executeSql(sql, [], callback);
+            });
+        });
+    }
+    function checkEncoding(tx, cb) {
+        // UTF-8 on chrome/android, UTF-16 on safari < 7.1
+        tx.executeSql('SELECT HEX("a") AS hex', [], function (tx, res) {
+            var hex = res.rows.item(0).hex;
+            encoding = hex.length === 2 ? 'UTF-8' : 'UTF-16';
+            cb();
+        });
+    }
+    function onGetInstanceId() {
+        while (idRequests.length > 0) {
+            var idCallback = idRequests.pop();
+            idCallback(null, instanceId);
+        }
+    }
+    function onGetVersion(tx, dbVersion) {
+        if (dbVersion === 0) {
+            // initial schema
+            var meta = 'CREATE TABLE IF NOT EXISTS ' + constants_1.META_STORE +
+                ' (dbid, db_version INTEGER)';
+            var attach = 'CREATE TABLE IF NOT EXISTS ' + constants_1.ATTACH_STORE +
+                ' (digest UNIQUE, escaped TINYINT(1), body BLOB)';
+            var attachAndRev = 'CREATE TABLE IF NOT EXISTS ' +
+                constants_1.ATTACH_AND_SEQ_STORE + ' (digest, seq INTEGER)';
+            // TODO: migrate winningseq to INTEGER
+            var doc = 'CREATE TABLE IF NOT EXISTS ' + constants_1.DOC_STORE +
+                ' (id unique, json, winningseq, max_seq INTEGER UNIQUE)';
+            var seq = 'CREATE TABLE IF NOT EXISTS ' + constants_1.BY_SEQ_STORE +
+                ' (seq INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, ' +
+                'json, deleted TINYINT(1), doc_id, rev)';
+            var local = 'CREATE TABLE IF NOT EXISTS ' + constants_1.LOCAL_STORE +
+                ' (id UNIQUE, rev, json)';
+            // creates
+            tx.executeSql(attach);
+            tx.executeSql(local);
+            tx.executeSql(attachAndRev, [], function () {
+                tx.executeSql(ATTACH_AND_SEQ_STORE_SEQ_INDEX_SQL);
+                tx.executeSql(ATTACH_AND_SEQ_STORE_ATTACH_INDEX_SQL);
+            });
+            tx.executeSql(doc, [], function () {
+                tx.executeSql(DOC_STORE_WINNINGSEQ_INDEX_SQL);
+                tx.executeSql(seq, [], function () {
+                    tx.executeSql(BY_SEQ_STORE_DELETED_INDEX_SQL);
+                    tx.executeSql(BY_SEQ_STORE_DOC_ID_REV_INDEX_SQL);
+                    tx.executeSql(meta, [], function () {
+                        // mark the db version, and new dbid
+                        var initSeq = 'INSERT INTO ' + constants_1.META_STORE +
+                            ' (db_version, dbid) VALUES (?,?)';
+                        instanceId = (0, pouchdb_utils_1.uuid)();
+                        var initSeqArgs = [constants_1.ADAPTER_VERSION, instanceId];
+                        tx.executeSql(initSeq, initSeqArgs, function () {
+                            onGetInstanceId();
+                        });
+                    });
+                });
+            });
+        }
+        else { // version > 0
+            var setupDone = function () {
+                var migrated = dbVersion < constants_1.ADAPTER_VERSION;
+                if (migrated) {
+                    // update the db version within this transaction
+                    tx.executeSql('UPDATE ' + constants_1.META_STORE + ' SET db_version = ' +
+                        constants_1.ADAPTER_VERSION);
+                }
+                // notify db.id() callers
+                var sql = 'SELECT dbid FROM ' + constants_1.META_STORE;
+                tx.executeSql(sql, [], function (tx, result) {
+                    instanceId = result.rows.item(0).dbid;
+                    onGetInstanceId();
+                });
+            };
+            // would love to use promises here, but then websql
+            // ends the transaction early
+            var tasks = [
+                runMigration2,
+                runMigration3,
+                runMigration4,
+                runMigration5,
+                runMigration6,
+                runMigration7,
+                setupDone
+            ];
+            // run each migration sequentially
+            var i = dbVersion;
+            var nextMigration = function (tx) {
+                tasks[i - 1](tx, nextMigration);
+                i++;
+            };
+            nextMigration(tx);
+        }
+    }
+    function setup() {
+        db.transaction(function (tx) {
+            // first check the encoding
+            checkEncoding(tx, function () {
+                // then get the version
+                fetchVersion(tx);
+            });
+        }, (0, utils_1.websqlError)(callback), dbCreated);
+    }
+    function fetchVersion(tx) {
+        var sql = 'SELECT sql FROM sqlite_master WHERE tbl_name = ' + constants_1.META_STORE;
+        tx.executeSql(sql, [], function (tx, result) {
+            if (!result.rows.length) {
+                // database hasn't even been created yet (version 0)
+                onGetVersion(tx, 0);
+            }
+            else if (!/db_version/.test(result.rows.item(0).sql)) {
+                // table was created, but without the new db_version column,
+                // so add it.
+                tx.executeSql('ALTER TABLE ' + constants_1.META_STORE +
+                    ' ADD COLUMN db_version INTEGER', [], function () {
+                    // before version 2, this column didn't even exist
+                    onGetVersion(tx, 1);
+                });
+            }
+            else { // column exists, we can safely get it
+                tx.executeSql('SELECT db_version FROM ' + constants_1.META_STORE, [], function (tx, result) {
+                    var dbVersion = result.rows.item(0).db_version;
+                    onGetVersion(tx, dbVersion);
+                });
+            }
+        });
+    }
+    setup();
+    function getMaxSeq(tx, callback) {
+        var sql = 'SELECT MAX(seq) AS seq FROM ' + constants_1.BY_SEQ_STORE;
+        tx.executeSql(sql, [], function (tx, res) {
+            var updateSeq = res.rows.item(0).seq || 0;
+            callback(updateSeq);
+        });
+    }
+    function countDocs(tx, callback) {
+        // count the total rows
+        var sql = (0, utils_1.select)('COUNT(' + constants_1.DOC_STORE + '.id) AS \'num\'', [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], DOC_STORE_AND_BY_SEQ_JOINER, constants_1.BY_SEQ_STORE + '.deleted=0');
+        tx.executeSql(sql, [], function (tx, result) {
+            callback(result.rows.item(0).num);
+        });
+    }
+    api._remote = false;
+    api.type = function () {
+        return 'websql';
+    };
+    api._id = (0, pouchdb_utils_1.toPromise)(function (callback) {
+        callback(null, instanceId);
+    });
+    api._info = function (callback) {
+        var seq;
+        var docCount;
+        db.readTransaction(function (tx) {
+            getMaxSeq(tx, function (theSeq) {
+                seq = theSeq;
+            });
+            countDocs(tx, function (theDocCount) {
+                docCount = theDocCount;
+            });
+        }, (0, utils_1.websqlError)(callback), function () {
+            callback(null, {
+                doc_count: docCount,
+                update_seq: seq,
+                websql_encoding: encoding
+            });
+        });
+    };
+    api._bulkDocs = function (req, reqOpts, callback) {
+        (0, bulkDocs_1.default)(opts, req, reqOpts, api, db, websqlChanges, callback);
+    };
+    function latest(tx, id, rev, callback, finish) {
+        var sql = (0, utils_1.select)(SELECT_DOCS, [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], DOC_STORE_AND_BY_SEQ_JOINER, constants_1.DOC_STORE + '.id=?');
+        var sqlArgs = [id];
+        tx.executeSql(sql, sqlArgs, function (a, results) {
+            if (!results.rows.length) {
+                var err = (0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_DOC, 'missing');
+                return finish(err);
+            }
+            var item = results.rows.item(0);
+            var metadata = (0, pouchdb_json_1.safeJsonParse)(item.metadata);
+            callback((0, pouchdb_merge_1.latest)(rev, metadata));
+        });
+    }
+    api._get = function (id, opts, callback) {
+        var doc;
+        var metadata;
+        var tx = opts.ctx;
+        if (!tx) {
+            return db.readTransaction(function (txn) {
+                api._get(id, Object.assign({ ctx: txn }, opts), callback);
+            });
+        }
+        function finish(err) {
+            callback(err, { doc: doc, metadata: metadata, ctx: tx });
+        }
+        var sql;
+        var sqlArgs;
+        if (!opts.rev) {
+            sql = (0, utils_1.select)(SELECT_DOCS, [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], DOC_STORE_AND_BY_SEQ_JOINER, constants_1.DOC_STORE + '.id=?');
+            sqlArgs = [id];
+        }
+        else if (opts.latest) {
+            latest(tx, id, opts.rev, function (latestRev) {
+                opts.latest = false;
+                opts.rev = latestRev;
+                api._get(id, opts, callback);
+            }, finish);
+            return;
+        }
+        else {
+            sql = (0, utils_1.select)(SELECT_DOCS, [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], constants_1.DOC_STORE + '.id=' + constants_1.BY_SEQ_STORE + '.doc_id', [constants_1.BY_SEQ_STORE + '.doc_id=?', constants_1.BY_SEQ_STORE + '.rev=?']);
+            sqlArgs = [id, opts.rev];
+        }
+        tx.executeSql(sql, sqlArgs, function (a, results) {
+            if (!results.rows.length) {
+                var missingErr = (0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_DOC, 'missing');
+                return finish(missingErr);
+            }
+            var item = results.rows.item(0);
+            metadata = (0, pouchdb_json_1.safeJsonParse)(item.metadata);
+            if (item.deleted && !opts.rev) {
+                var deletedErr = (0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_DOC, 'deleted');
+                return finish(deletedErr);
+            }
+            doc = (0, utils_1.unstringifyDoc)(item.data, metadata.id, item.rev);
+            finish();
+        });
+    };
+    api._allDocs = function (opts, callback) {
+        var results = [];
+        var totalRows;
+        var updateSeq;
+        var start = 'startkey' in opts ? opts.startkey : false;
+        var end = 'endkey' in opts ? opts.endkey : false;
+        var key = 'key' in opts ? opts.key : false;
+        var keys = 'keys' in opts ? opts.keys : false;
+        var descending = 'descending' in opts ? opts.descending : false;
+        var limit = 'limit' in opts ? opts.limit : -1;
+        var offset = 'skip' in opts ? opts.skip : 0;
+        var inclusiveEnd = opts.inclusive_end !== false;
+        var sqlArgs = [];
+        var criteria = [];
+        var keyChunks = [];
+        if (keys) {
+            var destinctKeys = [];
+            keys.forEach(function (key) {
+                if (destinctKeys.indexOf(key) === -1) {
+                    destinctKeys.push(key);
+                }
+            });
+            for (var index = 0; index < destinctKeys.length; index += 999) {
+                var chunk = destinctKeys.slice(index, index + 999);
+                if (chunk.length > 0) {
+                    keyChunks.push(chunk);
+                }
+            }
+        }
+        else if (key !== false) {
+            criteria.push(constants_1.DOC_STORE + '.id = ?');
+            sqlArgs.push(key);
+        }
+        else if (start !== false || end !== false) {
+            if (start !== false) {
+                criteria.push(constants_1.DOC_STORE + '.id ' + (descending ? '<=' : '>=') + ' ?');
+                sqlArgs.push(start);
+            }
+            if (end !== false) {
+                var comparator = descending ? '>' : '<';
+                if (inclusiveEnd) {
+                    comparator += '=';
+                }
+                criteria.push(constants_1.DOC_STORE + '.id ' + comparator + ' ?');
+                sqlArgs.push(end);
+            }
+            if (key !== false) {
+                criteria.push(constants_1.DOC_STORE + '.id = ?');
+                sqlArgs.push(key);
+            }
+        }
+        if (!keys) {
+            // report deleted if keys are specified
+            criteria.push(constants_1.BY_SEQ_STORE + '.deleted = 0');
+        }
+        db.readTransaction(function (tx) {
+            // count the docs in parallel to other operations
+            countDocs(tx, function (docCount) {
+                totalRows = docCount;
+            });
+            /* istanbul ignore if */
+            if (opts.update_seq) {
+                // get max sequence in parallel to other operations
+                getMaxSeq(tx, function (theSeq) {
+                    updateSeq = theSeq;
+                });
+            }
+            if (limit === 0) {
+                return;
+            }
+            if (keys) {
+                var finishedCount = 0;
+                var allRows = [];
+                keyChunks.forEach(function (keyChunk) {
+                    sqlArgs = [];
+                    criteria = [];
+                    var bindingStr = "";
+                    keyChunk.forEach(function () {
+                        bindingStr += '?,';
+                    });
+                    bindingStr = bindingStr.substring(0, bindingStr.length - 1); // keys is never empty
+                    criteria.push(constants_1.DOC_STORE + '.id IN (' + bindingStr + ')');
+                    sqlArgs = sqlArgs.concat(keyChunk);
+                    var sql = (0, utils_1.select)(SELECT_DOCS, [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], DOC_STORE_AND_BY_SEQ_JOINER, criteria, constants_1.DOC_STORE + '.id ' + (descending ? 'DESC' : 'ASC'));
+                    sql += ' LIMIT ' + limit + ' OFFSET ' + offset;
+                    tx.executeSql(sql, sqlArgs, function (tx, result) {
+                        finishedCount++;
+                        for (var index = 0; index < result.rows.length; index++) {
+                            allRows.push(result.rows.item(index));
+                        }
+                        if (finishedCount === keyChunks.length) {
+                            processResult(allRows);
+                        }
+                    });
+                });
+            }
+            else {
+                // do a single query to fetch the documents
+                var sql = (0, utils_1.select)(SELECT_DOCS, [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE], DOC_STORE_AND_BY_SEQ_JOINER, criteria, constants_1.DOC_STORE + '.id ' + (descending ? 'DESC' : 'ASC'));
+                sql += ' LIMIT ' + limit + ' OFFSET ' + offset;
+                tx.executeSql(sql, sqlArgs, function (tx, result) {
+                    var rows = [];
+                    for (var index = 0; index < result.rows.length; index++) {
+                        rows.push(result.rows.item(index));
+                    }
+                    processResult(rows);
+                });
+            }
+            function processResult(rows) {
+                for (var i = 0, l = rows.length; i < l; i++) {
+                    var item = rows[i];
+                    var metadata = (0, pouchdb_json_1.safeJsonParse)(item.metadata);
+                    var id = metadata.id;
+                    var data = (0, utils_1.unstringifyDoc)(item.data, id, item.rev);
+                    var winningRev = data._rev;
+                    var doc = {
+                        id: id,
+                        key: id,
+                        value: { rev: winningRev }
+                    };
+                    if (opts.include_docs) {
+                        doc.doc = data;
+                        doc.doc._rev = winningRev;
+                        if (opts.conflicts) {
+                            var conflicts = (0, pouchdb_merge_1.collectConflicts)(metadata);
+                            if (conflicts.length) {
+                                doc.doc._conflicts = conflicts;
+                            }
+                        }
+                        fetchAttachmentsIfNecessary(doc.doc, opts, api, tx);
+                    }
+                    if (item.deleted) {
+                        if (keys) {
+                            doc.value.deleted = true;
+                            doc.doc = null;
+                        }
+                        else {
+                            // propably should not happen
+                            continue;
+                        }
+                    }
+                    if (!keys) {
+                        results.push(doc);
+                    }
+                    else {
+                        var index = keys.indexOf(id, index);
+                        do {
+                            results[index] = doc;
+                            index = keys.indexOf(id, index + 1);
+                        } while (index > -1 && index < keys.length);
+                    }
+                }
+                if (keys) {
+                    keys.forEach(function (key, index) {
+                        if (!results[index]) {
+                            results[index] = { key: key, error: 'not_found' };
+                        }
+                    });
+                }
+            }
+        }, (0, utils_1.websqlError)(callback), function () {
+            var returnVal = {
+                total_rows: totalRows,
+                offset: opts.skip,
+                rows: results
+            };
+            /* istanbul ignore if */
+            if (opts.update_seq) {
+                returnVal.update_seq = updateSeq;
+            }
+            callback(null, returnVal);
+        });
+    };
+    api._changes = function (opts) {
+        opts = (0, pouchdb_utils_1.clone)(opts);
+        if (opts.continuous) {
+            var id = api._name + ':' + (0, pouchdb_utils_1.uuid)();
+            websqlChanges.addListener(api._name, id, api, opts);
+            websqlChanges.notify(api._name);
+            return {
+                cancel: function () {
+                    websqlChanges.removeListener(api._name, id);
+                }
+            };
+        }
+        var descending = opts.descending;
+        // Ignore the `since` parameter when `descending` is true
+        opts.since = opts.since && !descending ? opts.since : 0;
+        var limit = 'limit' in opts ? opts.limit : -1;
+        if (limit === 0) {
+            limit = 1; // per CouchDB _changes spec
+        }
+        var results = [];
+        var numResults = 0;
+        function fetchChanges() {
+            var selectStmt = constants_1.DOC_STORE + '.json AS metadata, ' +
+                constants_1.DOC_STORE + '.max_seq AS maxSeq, ' +
+                constants_1.BY_SEQ_STORE + '.json AS winningDoc, ' +
+                constants_1.BY_SEQ_STORE + '.rev AS winningRev ';
+            var from = constants_1.DOC_STORE + ' JOIN ' + constants_1.BY_SEQ_STORE;
+            var joiner = constants_1.DOC_STORE + '.id=' + constants_1.BY_SEQ_STORE + '.doc_id' +
+                ' AND ' + constants_1.DOC_STORE + '.winningseq=' + constants_1.BY_SEQ_STORE + '.seq';
+            var criteria = ['maxSeq > ?'];
+            var sqlArgs = [opts.since];
+            if (opts.doc_ids) {
+                criteria.push(constants_1.DOC_STORE + '.id IN ' + (0, utils_1.qMarks)(opts.doc_ids.length));
+                sqlArgs = sqlArgs.concat(opts.doc_ids);
+            }
+            var orderBy = 'maxSeq ' + (descending ? 'DESC' : 'ASC');
+            var sql = (0, utils_1.select)(selectStmt, from, joiner, criteria, orderBy);
+            var filter = (0, pouchdb_utils_1.filterChange)(opts);
+            if (!opts.view && !opts.filter) {
+                // we can just limit in the query
+                sql += ' LIMIT ' + limit;
+            }
+            var lastSeq = opts.since || 0;
+            db.readTransaction(function (tx) {
+                tx.executeSql(sql, sqlArgs, function (tx, result) {
+                    function reportChange(change) {
+                        return function () {
+                            opts.onChange(change);
+                        };
+                    }
+                    for (var i = 0, l = result.rows.length; i < l; i++) {
+                        var item = result.rows.item(i);
+                        var metadata = (0, pouchdb_json_1.safeJsonParse)(item.metadata);
+                        lastSeq = item.maxSeq;
+                        var doc = (0, utils_1.unstringifyDoc)(item.winningDoc, metadata.id, item.winningRev);
+                        var change = opts.processChange(doc, metadata, opts);
+                        change.seq = item.maxSeq;
+                        var filtered = filter(change);
+                        if (typeof filtered === 'object') {
+                            return opts.complete(filtered);
+                        }
+                        if (filtered) {
+                            numResults++;
+                            if (opts.return_docs) {
+                                results.push(change);
+                            }
+                            // process the attachment immediately
+                            // for the benefit of live listeners
+                            if (opts.attachments && opts.include_docs) {
+                                fetchAttachmentsIfNecessary(doc, opts, api, tx, reportChange(change));
+                            }
+                            else {
+                                reportChange(change)();
+                            }
+                        }
+                        if (numResults === limit) {
+                            break;
+                        }
+                    }
+                });
+            }, (0, utils_1.websqlError)(opts.complete), function () {
+                if (!opts.continuous) {
+                    opts.complete(null, {
+                        results: results,
+                        last_seq: lastSeq
+                    });
+                }
+            });
+        }
+        fetchChanges();
+    };
+    api._close = function (callback) {
+        //WebSQL databases do not need to be closed
+        callback();
+    };
+    api._getAttachment = function (docId, attachId, attachment, opts, callback) {
+        var res;
+        var tx = opts.ctx;
+        var digest = attachment.digest;
+        var type = attachment.content_type;
+        var sql = 'SELECT escaped, ' +
+            'CASE WHEN escaped = 1 THEN body ELSE HEX(body) END AS body FROM ' +
+            constants_1.ATTACH_STORE + ' WHERE digest=?';
+        tx.executeSql(sql, [digest], function (tx, result) {
+            // websql has a bug where \u0000 causes early truncation in strings
+            // and blobs. to work around this, we used to use the hex() function,
+            // but that's not performant. after migration 6, we remove \u0000
+            // and add it back in afterwards
+            var item = result.rows.item(0);
+            var data = item.escaped ? (0, utils_1.unescapeBlob)(item.body) :
+                (0, parseHex_1.default)(item.body, encoding);
+            if (opts.binary) {
+                res = (0, pouchdb_binary_utils_1.binaryStringToBlobOrBuffer)(data, type);
+            }
+            else {
+                res = (0, pouchdb_binary_utils_1.btoa)(data);
+            }
+            callback(null, res);
+        });
+    };
+    api._getRevisionTree = function (docId, callback) {
+        db.readTransaction(function (tx) {
+            var sql = 'SELECT json AS metadata FROM ' + constants_1.DOC_STORE + ' WHERE id = ?';
+            tx.executeSql(sql, [docId], function (tx, result) {
+                if (!result.rows.length) {
+                    callback((0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_DOC));
+                }
+                else {
+                    var data = (0, pouchdb_json_1.safeJsonParse)(result.rows.item(0).metadata);
+                    callback(null, data.rev_tree);
+                }
+            });
+        });
+    };
+    api._doCompaction = function (docId, revs, callback) {
+        if (!revs.length) {
+            return callback();
+        }
+        db.transaction(function (tx) {
+            // update doc store
+            var sql = 'SELECT json AS metadata FROM ' + constants_1.DOC_STORE + ' WHERE id = ?';
+            tx.executeSql(sql, [docId], function (tx, result) {
+                var metadata = (0, pouchdb_json_1.safeJsonParse)(result.rows.item(0).metadata);
+                (0, pouchdb_merge_1.traverseRevTree)(metadata.rev_tree, function (isLeaf, pos, revHash, ctx, opts) {
+                    var rev = pos + '-' + revHash;
+                    if (revs.indexOf(rev) !== -1) {
+                        opts.status = 'missing';
+                    }
+                });
+                var sql = 'UPDATE ' + constants_1.DOC_STORE + ' SET json = ? WHERE id = ?';
+                tx.executeSql(sql, [(0, pouchdb_json_1.safeJsonStringify)(metadata), docId]);
+            });
+            (0, utils_1.compactRevs)(revs, docId, tx);
+        }, (0, utils_1.websqlError)(callback), function () {
+            callback();
+        });
+    };
+    api._getLocal = function (id, callback) {
+        db.readTransaction(function (tx) {
+            var sql = 'SELECT json, rev FROM ' + constants_1.LOCAL_STORE + ' WHERE id=?';
+            tx.executeSql(sql, [id], function (tx, res) {
+                if (res.rows.length) {
+                    var item = res.rows.item(0);
+                    var doc = (0, utils_1.unstringifyDoc)(item.json, id, item.rev);
+                    callback(null, doc);
+                }
+                else {
+                    callback((0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_DOC));
+                }
+            });
+        });
+    };
+    api._putLocal = function (doc, opts, callback) {
+        if (typeof opts === 'function') {
+            callback = opts;
+            opts = {};
+        }
+        delete doc._revisions; // ignore this, trust the rev
+        var oldRev = doc._rev;
+        var id = doc._id;
+        var newRev;
+        if (!oldRev) {
+            newRev = doc._rev = '0-1';
+        }
+        else {
+            newRev = doc._rev = '0-' + (parseInt(oldRev.split('-')[1], 10) + 1);
+        }
+        var json = (0, utils_1.stringifyDoc)(doc);
+        var ret;
+        function putLocal(tx) {
+            var sql;
+            var values;
+            if (oldRev) {
+                sql = 'UPDATE ' + constants_1.LOCAL_STORE + ' SET rev=?, json=? ' +
+                    'WHERE id=? AND rev=?';
+                values = [newRev, json, id, oldRev];
+            }
+            else {
+                sql = 'INSERT INTO ' + constants_1.LOCAL_STORE + ' (id, rev, json) VALUES (?,?,?)';
+                values = [id, newRev, json];
+            }
+            tx.executeSql(sql, values, function (tx, res) {
+                if (res.rowsAffected) {
+                    ret = { ok: true, id: id, rev: newRev };
+                    if (opts.ctx) { // return immediately
+                        callback(null, ret);
+                    }
+                }
+                else {
+                    callback((0, pouchdb_errors_1.createError)(pouchdb_errors_1.REV_CONFLICT));
+                }
+            }, function () {
+                callback((0, pouchdb_errors_1.createError)(pouchdb_errors_1.REV_CONFLICT));
+                return false; // ack that we handled the error
+            });
+        }
+        if (opts.ctx) {
+            putLocal(opts.ctx);
+        }
+        else {
+            db.transaction(putLocal, (0, utils_1.websqlError)(callback), function () {
+                if (ret) {
+                    callback(null, ret);
+                }
+            });
+        }
+    };
+    api._removeLocal = function (doc, opts, callback) {
+        if (typeof opts === 'function') {
+            callback = opts;
+            opts = {};
+        }
+        var ret;
+        function removeLocal(tx) {
+            var sql = 'DELETE FROM ' + constants_1.LOCAL_STORE + ' WHERE id=? AND rev=?';
+            var params = [doc._id, doc._rev];
+            tx.executeSql(sql, params, function (tx, res) {
+                if (!res.rowsAffected) {
+                    return callback((0, pouchdb_errors_1.createError)(pouchdb_errors_1.MISSING_DOC));
+                }
+                ret = { ok: true, id: doc._id, rev: '0-0' };
+                if (opts.ctx) { // return immediately
+                    callback(null, ret);
+                }
+            });
+        }
+        if (opts.ctx) {
+            removeLocal(opts.ctx);
+        }
+        else {
+            db.transaction(removeLocal, (0, utils_1.websqlError)(callback), function () {
+                if (ret) {
+                    callback(null, ret);
+                }
+            });
+        }
+    };
+    api._destroy = function (opts, callback) {
+        websqlChanges.removeAllListeners(api._name);
+        db.transaction(function (tx) {
+            var stores = [constants_1.DOC_STORE, constants_1.BY_SEQ_STORE, constants_1.ATTACH_STORE, constants_1.META_STORE,
+                constants_1.LOCAL_STORE, constants_1.ATTACH_AND_SEQ_STORE];
+            stores.forEach(function (store) {
+                tx.executeSql('DROP TABLE IF EXISTS ' + store, []);
+            });
+        }, (0, utils_1.websqlError)(callback), function () {
+            if ((0, pouchdb_utils_1.hasLocalStorage)()) {
+                delete window.localStorage['_pouch__websqldb_' + api._name];
+                delete window.localStorage[api._name];
+            }
+            callback(null, { 'ok': true });
+        });
+    };
+}
+exports.default = WebSqlPouch;
diff --git a/src-cjs/openDatabase.js b/src-cjs/openDatabase.js
new file mode 100644
index 0000000000000000000000000000000000000000..3576579bd60e2aa1f709ce08a32dccc7db7c0f23
--- /dev/null
+++ b/src-cjs/openDatabase.js
@@ -0,0 +1,28 @@
+'use strict';
+Object.defineProperty(exports, "__esModule", { value: true });
+var cachedDatabases = new Map();
+// openDatabase passed in through opts (e.g. for node-websql)
+function openDatabaseWithOpts(opts) {
+    return opts.websql(opts.name, opts.version, opts.description, opts.size);
+}
+function openDBSafely(opts) {
+    try {
+        return {
+            db: openDatabaseWithOpts(opts)
+        };
+    }
+    catch (err) {
+        return {
+            error: err
+        };
+    }
+}
+function openDB(opts) {
+    var cachedResult = cachedDatabases.get(opts.name);
+    if (!cachedResult) {
+        cachedResult = openDBSafely(opts);
+        cachedDatabases.set(opts.name, cachedResult);
+    }
+    return cachedResult;
+}
+exports.default = openDB;
diff --git a/src-cjs/parseHex.js b/src-cjs/parseHex.js
new file mode 100644
index 0000000000000000000000000000000000000000..f688c001378ee6c418d92d2b018e95a154c2888f
--- /dev/null
+++ b/src-cjs/parseHex.js
@@ -0,0 +1,59 @@
+"use strict";
+//
+// Parsing hex strings. Yeah.
+//
+// So basically we need this because of a bug in WebSQL:
+// https://code.google.com/p/chromium/issues/detail?id=422690
+// https://bugs.webkit.org/show_bug.cgi?id=137637
+//
+// UTF-8 and UTF-16 are provided as separate functions
+// for meager performance improvements
+//
+Object.defineProperty(exports, "__esModule", { value: true });
+function decodeUtf8(str) {
+    return decodeURIComponent(escape(str));
+}
+function hexToInt(charCode) {
+    // '0'-'9' is 48-57
+    // 'A'-'F' is 65-70
+    // SQLite will only give us uppercase hex
+    return charCode < 65 ? (charCode - 48) : (charCode - 55);
+}
+// Example:
+// pragma encoding=utf8;
+// select hex('A');
+// returns '41'
+function parseHexUtf8(str, start, end) {
+    var result = '';
+    while (start < end) {
+        result += String.fromCharCode((hexToInt(str.charCodeAt(start++)) << 4) |
+            hexToInt(str.charCodeAt(start++)));
+    }
+    return result;
+}
+// Example:
+// pragma encoding=utf16;
+// select hex('A');
+// returns '4100'
+// notice that the 00 comes after the 41 (i.e. it's swizzled)
+function parseHexUtf16(str, start, end) {
+    var result = '';
+    while (start < end) {
+        // UTF-16, so swizzle the bytes
+        result += String.fromCharCode((hexToInt(str.charCodeAt(start + 2)) << 12) |
+            (hexToInt(str.charCodeAt(start + 3)) << 8) |
+            (hexToInt(str.charCodeAt(start)) << 4) |
+            hexToInt(str.charCodeAt(start + 1)));
+        start += 4;
+    }
+    return result;
+}
+function parseHexString(str, encoding) {
+    if (encoding === 'UTF-8') {
+        return decodeUtf8(parseHexUtf8(str, 0, str.length));
+    }
+    else {
+        return parseHexUtf16(str, 0, str.length);
+    }
+}
+exports.default = parseHexString;
diff --git a/src-cjs/utils.js b/src-cjs/utils.js
new file mode 100644
index 0000000000000000000000000000000000000000..13b8a3b258a4c5d87bbd5ec8fe5b613d1a5302af
--- /dev/null
+++ b/src-cjs/utils.js
@@ -0,0 +1,160 @@
+"use strict";
+Object.defineProperty(exports, "__esModule", { value: true });
+exports.websqlError = exports.getSize = exports.compactRevs = exports.select = exports.qMarks = exports.unstringifyDoc = exports.stringifyDoc = exports.unescapeBlob = exports.escapeBlob = void 0;
+var pouchdb_errors_1 = require("pouchdb-errors");
+var pouchdb_utils_1 = require("pouchdb-utils");
+var constants_1 = require("./constants");
+// escapeBlob and unescapeBlob are workarounds for a websql bug:
+// https://code.google.com/p/chromium/issues/detail?id=422690
+// https://bugs.webkit.org/show_bug.cgi?id=137637
+// The goal is to never actually insert the \u0000 character
+// in the database.
+function escapeBlob(str) {
+    /* eslint-disable no-control-regex */
+    return str
+        .replace(/\u0002/g, '\u0002\u0002')
+        .replace(/\u0001/g, '\u0001\u0002')
+        .replace(/\u0000/g, '\u0001\u0001');
+    /* eslint-enable no-control-regex */
+}
+exports.escapeBlob = escapeBlob;
+function unescapeBlob(str) {
+    /* eslint-disable no-control-regex */
+    return str
+        .replace(/\u0001\u0001/g, '\u0000')
+        .replace(/\u0001\u0002/g, '\u0001')
+        .replace(/\u0002\u0002/g, '\u0002');
+    /* eslint-enable no-control-regex */
+}
+exports.unescapeBlob = unescapeBlob;
+function stringifyDoc(doc) {
+    // don't bother storing the id/rev. it uses lots of space,
+    // in persistent map/reduce especially
+    delete doc._id;
+    delete doc._rev;
+    return JSON.stringify(doc);
+}
+exports.stringifyDoc = stringifyDoc;
+function unstringifyDoc(doc, id, rev) {
+    doc = JSON.parse(doc);
+    doc._id = id;
+    doc._rev = rev;
+    return doc;
+}
+exports.unstringifyDoc = unstringifyDoc;
+// question mark groups IN queries, e.g. 3 -> '(?,?,?)'
+function qMarks(num) {
+    var s = '(';
+    while (num--) {
+        s += '?';
+        if (num) {
+            s += ',';
+        }
+    }
+    return s + ')';
+}
+exports.qMarks = qMarks;
+function select(selector, table, joiner, where, orderBy) {
+    return 'SELECT ' + selector + ' FROM ' +
+        (typeof table === 'string' ? table : table.join(' JOIN ')) +
+        (joiner ? (' ON ' + joiner) : '') +
+        (where ? (' WHERE ' +
+            (typeof where === 'string' ? where : where.join(' AND '))) : '') +
+        (orderBy ? (' ORDER BY ' + orderBy) : '');
+}
+exports.select = select;
+function compactRevs(revs, docId, tx) {
+    if (!revs.length) {
+        return;
+    }
+    var numDone = 0;
+    var seqs = [];
+    function checkDone() {
+        if (++numDone === revs.length) { // done
+            deleteOrphans();
+        }
+    }
+    function deleteOrphans() {
+        // find orphaned attachment digests
+        if (!seqs.length) {
+            return;
+        }
+        var sql = 'SELECT DISTINCT digest AS digest FROM ' +
+            constants_1.ATTACH_AND_SEQ_STORE + ' WHERE seq IN ' + qMarks(seqs.length);
+        tx.executeSql(sql, seqs, function (tx, res) {
+            var digestsToCheck = [];
+            for (var i = 0; i < res.rows.length; i++) {
+                digestsToCheck.push(res.rows.item(i).digest);
+            }
+            if (!digestsToCheck.length) {
+                return;
+            }
+            var sql = 'DELETE FROM ' + constants_1.ATTACH_AND_SEQ_STORE +
+                ' WHERE seq IN (' +
+                seqs.map(function () { return '?'; }).join(',') +
+                ')';
+            tx.executeSql(sql, seqs, function (tx) {
+                var sql = 'SELECT digest FROM ' + constants_1.ATTACH_AND_SEQ_STORE +
+                    ' WHERE digest IN (' +
+                    digestsToCheck.map(function () { return '?'; }).join(',') +
+                    ')';
+                tx.executeSql(sql, digestsToCheck, function (tx, res) {
+                    var nonOrphanedDigests = new Set();
+                    for (var i = 0; i < res.rows.length; i++) {
+                        nonOrphanedDigests.add(res.rows.item(i).digest);
+                    }
+                    digestsToCheck.forEach(function (digest) {
+                        if (nonOrphanedDigests.has(digest)) {
+                            return;
+                        }
+                        tx.executeSql('DELETE FROM ' + constants_1.ATTACH_AND_SEQ_STORE + ' WHERE digest=?', [digest]);
+                        tx.executeSql('DELETE FROM ' + constants_1.ATTACH_STORE + ' WHERE digest=?', [digest]);
+                    });
+                });
+            });
+        });
+    }
+    // update by-seq and attach stores in parallel
+    revs.forEach(function (rev) {
+        var sql = 'SELECT seq FROM ' + constants_1.BY_SEQ_STORE +
+            ' WHERE doc_id=? AND rev=?';
+        tx.executeSql(sql, [docId, rev], function (tx, res) {
+            if (!res.rows.length) { // already deleted
+                return checkDone();
+            }
+            var seq = res.rows.item(0).seq;
+            seqs.push(seq);
+            tx.executeSql('DELETE FROM ' + constants_1.BY_SEQ_STORE + ' WHERE seq=?', [seq], checkDone);
+        });
+    });
+}
+exports.compactRevs = compactRevs;
+function websqlError(callback) {
+    return function (event) {
+        (0, pouchdb_utils_1.guardedConsole)('error', 'WebSQL threw an error', event);
+        // event may actually be a SQLError object, so report is as such
+        var errorNameMatch = event && event.constructor.toString()
+            .match(/function ([^(]+)/);
+        var errorName = (errorNameMatch && errorNameMatch[1]) || event.type;
+        var errorReason = event.target || event.message;
+        callback((0, pouchdb_errors_1.createError)(pouchdb_errors_1.WSQ_ERROR, errorReason, errorName));
+    };
+}
+exports.websqlError = websqlError;
+function getSize(opts) {
+    if ('size' in opts) {
+        // triggers immediate popup in iOS, fixes #2347
+        // e.g. 5000001 asks for 5 MB, 10000001 asks for 10 MB,
+        return opts.size * 1000000;
+    }
+    // In iOS, doesn't matter as long as it's <= 5000000.
+    // Except that if you request too much, our tests fail
+    // because of the native "do you accept?" popup.
+    // In Android <=4.3, this value is actually used as an
+    // honest-to-god ceiling for data, so we need to
+    // set it to a decently high number.
+    var isAndroid = typeof navigator !== 'undefined' &&
+        /Android/.test(navigator.userAgent);
+    return isAndroid ? 5000000 : 1; // in PhantomJS, if you use 0 it will crash
+}
+exports.getSize = getSize;
