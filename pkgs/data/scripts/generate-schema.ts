import { ESLint } from 'eslint';
import fs from 'fs';
import { parseSchema } from 'json-schema-to-zod';
import JSON5 from 'json5';
import path from 'path';

const jsonSchemaFilePath = path.join(__dirname, '..', 'src', 'schema.json5');
const outputFilePath = path.join(__dirname, '..', 'src', 'generated-schema.ts');

// Read the JSON file
const jsonSchema = JSON5.parse(fs.readFileSync(jsonSchemaFilePath, 'utf8'));

let jsFileContent =
  '/* do not change this file directly, it is auto generated by `yarn run generate-schema`. */\n\n';
jsFileContent += "import { z } from 'zod';\n\n";
jsFileContent += 'export const schema = {\n';

for (const [key, schema] of Object.entries(jsonSchema.definitions)) {
  const js = parseSchema(schema as any);
  jsFileContent += `'${key}': ${js},\n`;
}

jsFileContent += '}\n\n';
jsFileContent += 'export default schema';

const eslint = new ESLint({
  useEslintrc: true,
  fix: true,
});

async function writeLintedCode(code: string, outputPath: string) {
  const results = await eslint.lintText(code);
  if (results && results[0] && results[0].output) {
    fs.writeFileSync(outputPath, results[0].output);
  } else {
    fs.writeFileSync(outputPath, code);
  }
  console.log(`Generated code written to "${outputPath}".`);
}

writeLintedCode(
  jsFileContent.replace(/catchall\(z\.any\(\)\)/g, 'catchall(z.unknown())'),
  outputFilePath,
);
