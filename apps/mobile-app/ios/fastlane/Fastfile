# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require 'json'

default_platform(:ios)

configuration_file_path = File.join(__dir__, '..', 'config.xcconfig')
configuration = Xcodeproj::Config.new(configuration_file_path)

changelog_file_path = File.join(__dir__, '..', '..', 'changelog.txt')
changelog = File.exist?(changelog_file_path) ? File.read(changelog_file_path) : nil

def print_changelog(changelog)
  if changelog
    puts "\n\n-- Changelog ---------------------------\n#{changelog}\n----------------------------------------\n"
  else
    puts "\n\n-- Changelog ---------------------------\nNO CHANGELOG FILE FOUND\n----------------------------------------\n"
  end

  # Give the user some time to check the changelog
  sleep 4 if !ENV['CI']
end

platform :ios do
  desc "Push a new beta build to TestFlight"
  lane :nightly do
    print_changelog(changelog)

    app_store_connect_api_key(
      key_id: configuration.attributes['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: configuration.attributes['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_filepath: configuration.attributes['APP_STORE_CONNECT_API_KEY_FILE_PATH'],
    )

    ci_output_data = { version: configuration.attributes['MARKETING_VERSION'] }

    if ENV['CI']
      setup_ci

      build_number = app_store_build_number(
        live: false,
        app_identifier: configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_NIGHTLY'],
        version: configuration.attributes['MARKETING_VERSION'],
        initial_build_number: 2,
      ) + 2

      ci_output_data[:build_number] = build_number

      increment_build_number(
        xcodeproj: "Inventory.xcodeproj",
        build_number: build_number,
      )
    end

    if ENV['SYNC_CODE_SIGNING_GIT_URL']
      # Use Manual Code Signing
      update_code_signing_settings(
        use_automatic_signing: false,
        path: "Inventory.xcodeproj",
      )

      # Sync Certificates and Provisioning Profiles for Building
      sync_code_signing(
        type: "development",
        git_url: ENV['SYNC_CODE_SIGNING_GIT_URL'],
        app_identifier: configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_NIGHTLY'],
        readonly: !!ENV['CI'],
      )
      development_profile_path = ENV["sigh_#{configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_NIGHTLY']}_development_profile-path"]
      update_project_provisioning(
        xcodeproj: "Inventory.xcodeproj",
        build_configuration: "Nightly",
        profile: development_profile_path
      )

      # Sync Certificates and Provisioning Profiles for Exporting
      sync_code_signing(
        type: "appstore",
        git_url: ENV['SYNC_CODE_SIGNING_GIT_URL'],
        app_identifier: configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_NIGHTLY'],
        readonly: !!ENV['CI'],
      )
      appstore_certificate_name = ENV["sigh_#{configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_NIGHTLY']}_appstore_certificate-name"]

      build_app(
        workspace: "Inventory.xcworkspace",
        scheme: "Inventory (Nightly)",
        export_method: "app-store",
        export_options: {
          provisioningProfiles: lane_context['MATCH_PROVISIONING_PROFILE_MAPPING'],
          signingCertificate: appstore_certificate_name,
        }
      )
    else
      # Use Automatic Code Signing
      build_app(
        workspace: "Inventory.xcworkspace",
        scheme: "Inventory (Nightly)",
        xcargs: "-allowProvisioningUpdates",
      )
    end

    if ENV['CI']
      File.open(File.join(__dir__, '..', 'ci_output_data.json'), 'w') do |f|
        f.write(ci_output_data.to_json)
      end

      backup_xcarchive(
        destination: File.join(__dir__, '..'),
        zip_filename: "Inventory (Nightly)",
        versioned: false,
        zip: false,
      )
    end

    if !ENV['SKIP_UPLOAD_TO_TESTFLIGHT']
      upload_to_testflight(
        skip_waiting_for_build_processing: true,
        changelog: changelog,
      )
    end
  end

  lane :release do
    print_changelog(changelog)

    app_store_connect_api_key(
      key_id: configuration.attributes['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: configuration.attributes['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_filepath: configuration.attributes['APP_STORE_CONNECT_API_KEY_FILE_PATH'],
    )

    ci_output_data = { version: configuration.attributes['MARKETING_VERSION'] }

    if ENV['CI']
      setup_ci

      build_number = app_store_build_number(
        live: false,
        app_identifier: configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_RELEASE'],
        version: configuration.attributes['MARKETING_VERSION'],
        initial_build_number: 2,
      ) + 2

      ci_output_data[:build_number] = build_number

      increment_build_number(
        xcodeproj: "Inventory.xcodeproj",
        build_number: build_number,
      )
    end

    if ENV['SYNC_CODE_SIGNING_GIT_URL']
      # Use Manual Code Signing
      update_code_signing_settings(
        use_automatic_signing: false,
        path: "Inventory.xcodeproj",
      )

      # Sync Certificates and Provisioning Profiles for Building
      sync_code_signing(
        type: "development",
        git_url: ENV['SYNC_CODE_SIGNING_GIT_URL'],
        app_identifier: configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_RELEASE'],
        readonly: !!ENV['CI'],
      )
      development_profile_path = ENV["sigh_#{configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_RELEASE']}_development_profile-path"]
      update_project_provisioning(
        xcodeproj: "Inventory.xcodeproj",
        build_configuration: "Release",
        profile: development_profile_path
      )

      # Sync Certificates and Provisioning Profiles for Exporting
      sync_code_signing(
        type: "appstore",
        git_url: ENV['SYNC_CODE_SIGNING_GIT_URL'],
        app_identifier: configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_RELEASE'],
        readonly: !!ENV['CI'],
      )
      appstore_certificate_name = ENV["sigh_#{configuration.attributes['PRODUCT_BUNDLE_IDENTIFIER_RELEASE']}_appstore_certificate-name"]

      build_app(
        workspace: "Inventory.xcworkspace",
        scheme: "Inventory",
        export_method: "app-store",
        export_options: {
          provisioningProfiles: lane_context['MATCH_PROVISIONING_PROFILE_MAPPING'],
          signingCertificate: appstore_certificate_name,
        }
      )
    else
      # Use Automatic Code Signing
      build_app(
        workspace: "Inventory.xcworkspace",
        scheme: "Inventory",
        xcargs: "-allowProvisioningUpdates",
      )
    end

    if ENV['CI']
      File.open(File.join(__dir__, '..', 'ci_output_data.json'), 'w') do |f|
        f.write(ci_output_data.to_json)
      end

      backup_xcarchive(
        destination: File.join(__dir__, '..'),
        zip_filename: "Inventory",
        versioned: false,
        zip: false,
      )
    end

    if !ENV['SKIP_UPLOAD_TO_TESTFLIGHT']
      upload_to_testflight(
        skip_waiting_for_build_processing: true,
        changelog: changelog,
      )
    end
  end

  lane :lane_upload_to_testflight do
    app_store_connect_api_key(
      key_id: configuration.attributes['APP_STORE_CONNECT_API_KEY_ID'],
      issuer_id: configuration.attributes['APP_STORE_CONNECT_API_KEY_ISSUER_ID'],
      key_filepath: configuration.attributes['APP_STORE_CONNECT_API_KEY_FILE_PATH'],
    )

    upload_to_testflight(
      skip_waiting_for_build_processing: true,
      changelog: changelog,
    )
  end
end
